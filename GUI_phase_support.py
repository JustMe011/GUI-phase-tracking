#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Oct 02, 2018 12:11:05 PM CEST  platform: Linux
#    Oct 02, 2018 02:31:35 PM CEST  platform: Linux
#    Oct 02, 2018 03:31:38 PM CEST  platform: Linux
#    Oct 02, 2018 03:33:26 PM CEST  platform: Linux
#    Oct 02, 2018 04:36:15 PM CEST  platform: Linux
#    Oct 03, 2018 10:46:20 AM CEST  platform: Linux
#    Oct 03, 2018 02:49:40 PM CEST  platform: Linux
#    Oct 03, 2018 02:53:50 PM CEST  platform: Linux
#    Oct 04, 2018 11:28:39 AM CEST  platform: Linux
#    Oct 04, 2018 11:59:27 AM CEST  platform: Linux
#    Oct 04, 2018 02:01:37 PM CEST  platform: Linux
#    Oct 04, 2018 03:55:43 PM CEST  platform: Linux

import sys
from tkinter import filedialog
import matplotlib
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg as FCTkAgg
from matplotlib.backends.backend_tkagg import NavigationToolbar2Tk
from matplotlib.figure import Figure
import phase_sim
from numpy import *
import codecs

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global contEntry1,filename
    contEntry1 = StringVar()
    filename=StringVar()
    sys.stdout.flush()
    global cont_delim
    cont_delim = StringVar()
    global cont_chunck
    cont_chunck = StringVar()
    global freq_cut
    freq_cut = StringVar()
    global freq_samp
    freq_samp = StringVar()
    global applyfilt
    applyfilt = IntVar(0)
    global upload_check
    upload_check = StringVar()

def LoadSim_pressed(p1):
    print('GUI_phase_support.LoadSim_pressed')
    print('p1 = {0}'.format(p1))
    sys.stdout.flush()

def LoadFile_pressed(e):
    global w,loaddata,upload_check
    upload_check.set("Waiting...")
    w.Button3.config(relief=SUNKEN)
    del_decoded=codecs.decode(cont_delim.get(), 'unicode_escape')
    loaddata=list(phase_sim.loader(filename.get(),int(cont_chunck.get()),del_decoded))
    upload_check.set("Done!")
    

    
def Refresh_pressed(p1):
    global loaddata
    
    if applyfilt.get():
        try:
            fcc=float(freq_cut.get()) 
        except ValueError:
            fcc=1000;fss=2500000
        try:
            fss=float(freq_samp.get())
        except ValueError:
            fcc=1000;fss=2500000
        print(float(freq_cut.get()))
        loaddatafil=phase_sim.lowfilter(loaddata[1:5],fcc,fss)
        plotrefresh(pl4[0],pl4[1],loaddatafil[0])
        plotrefresh(pl5[0],pl5[1],loaddatafil[1])
        plotrefresh(pl6[0],pl6[1],loaddatafil[2])
        plotrefresh(pl7[0],pl7[1],loaddatafil[3]) 
    else:  
        plotrefresh(pl4[0],pl4[1],loaddata[1])
        plotrefresh(pl5[0],pl5[1],loaddata[2])
        plotrefresh(pl6[0],pl6[1],loaddata[3])
        plotrefresh(pl7[0],pl7[1],loaddata[4])   
    
    
def Search_pressed(e):
    global filename
    name=filedialog.askopenfilename(initialdir=".")
    filename.set(name)
    w.Text1.insert(END,filename.get())
    sys.stdout.flush()
    

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    global pl4,pl5,pl6,pl7
    w = gui
    top_level = top
    root = top
    pl1=plotinit(w.Frame1)
    pl4=plotinit(w.Frame4)
    pl5=plotinit(w.Frame5)
    pl6=plotinit(w.Frame6)
    pl7=plotinit(w.Frame7)

def plotinit(framename):
    global w
    f1=framename
    f= Figure(figsize=(6, 4), dpi=100)  
    ax1= f.add_subplot(111)
    canvas= FCTkAgg(f, f1)
    toolbar = NavigationToolbar2Tk(canvas, f1 )
    toolbar.pack()
    canvas.get_tk_widget().pack()
    return ax1, canvas
    
def plotrefresh(axes, canvasobj,x):
    axes.clear()
    axes.plot(x)
    canvasobj.draw()
       
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
    


if __name__ == '__main__':
    import GUI_phase
    GUI_phase.vp_start_gui()

























































